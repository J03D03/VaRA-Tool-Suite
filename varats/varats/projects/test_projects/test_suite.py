"""Project to run tests from the micro-benchmark Test-Suite"""
import typing as tp
import os

import benchbuild as bb
from plumbum import local

from varats.project.project_util import (
    ProjectBinaryWrapper,
    wrap_paths_to_binaries,
    BinaryType,
)


class MicroBenchmark(bb.Project):  # type: ignore
    """
    Get examples from the Test-Suite micro-benchmark suite.
    Which can be found at https://github.com/SVF-tools/Test-Suite.
    """

    NAME = 'test_suite'
    GROUP = 'test_projects'
    DOMAIN = 'testing'

    SOURCE = [
        bb.source.Git(
            remote="https://github.com/SVF-tools/Test-Suite.git",
            local="svf-test-suite",
            refspec="HEAD",
            limit=1,  # None,
            shallow=False,
        )
    ]

    DIRS = [
        "basic_c_tests",
        "basic_cpp_tests",
        # "complex_tests",
        "cpp_types",
        "cs_tests",
        "fs_tests",
        # "fstbhc_tests",
        "path_tests",
        "graphtxt",
        # "mem_leak",
        # "mta",
        "non_annotated_tests",
        "path_tests",
    ]

    LOCAL_PATHS = []

    @property
    def binaries(self) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        source = os.getcwd() + '/tmp/' + self.source[0].local
        for directory in self.DIRS:
            for filename in os.listdir(source + '/' + directory):
                absolute_filepath = source + '/' + directory + '/' + filename
                ext = os.path.splitext(absolute_filepath)[1]
                if('.cpp' == ext or '.c' == ext):
                    self.LOCAL_PATHS.append(directory + '/' + filename)
        return wrap_paths_to_binaries([(file_name.replace('.cpp', '').replace('.c', ''), BinaryType.executable) for file_name in self.LOCAL_PATHS])

    def run_tests(self) -> None:
        pass

    def compile(self) -> None:
        source = local.path(self.source_of_primary)
        with local.cwd(source):
            for file in self.LOCAL_PATHS:
                clang = bb.compiler.cxx(self)
                if('.c' == os.path.splitext(file)[1]):
                    clang = bb.compiler.cc(self)
                with local.env(CC=str(clang)):
                    bb.watch(clang)(
                        "{source}/{file}".format(source=source, file=file),
                        "-I{source}".format(source=source),
                        "-g",  # Generate source-level debug information
                        "-o", file.replace('.cpp', '').replace('.c', '')
                    )
